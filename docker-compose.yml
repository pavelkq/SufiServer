services:
  admin-backend:
    build: ./admin-backend
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=auth
      - DB_PORT=5432
      - PORT=4001
      - JWT_SECRET=your_jwt_secret_here
    ports:
      - "4001:4001"
    volumes:
      - ./admin-backend:/app
      - ./uploads/articles:/app/uploads/articles    # <== Монтируем папку для файлов
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  auth-service:
    build: ./auth-service
    env_file:
      - ./auth-service/.env
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=auth
      - DB_PORT=5432
      - PORT=5000
      - JWT_SECRET=your_jwt_secret_here
      - JWT_EXPIRES_IN=1h
    ports:
      - "5000:5000"
    volumes:
      - ./auth-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  db:
    image: postgres:13
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./wrapper.sh:/wrapper.sh
    entrypoint: ["/wrapper.sh"]
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: saki
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d saki"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  saki-service:
    build: ./saki-service
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=saki
      - DB_PORT=5432
      - PORT=4000
    ports:
      - "4000:4000"
    volumes:
      - ./saki-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app-network

  admin-frontend:
    build: ./admin-frontend
    volumes:
      - ./admin-frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - admin-backend
      - auth-service
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    image: nginx:latest
    ports:
      - "8090:80"
    volumes:
      - ./nginx_static:/opt/nginx_static:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./uploads:/opt/Sufi/uploads:ro  # ← ДОБАВИТЬ ЭТУ СТРОКУ
    depends_on:
      - admin-frontend
      - admin-backend
      - auth-service
      - saki-service
    networks:
      - app-network
    restart: unless-stopped

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
